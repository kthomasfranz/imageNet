if (missing(node_color) & missing(node_size)){
point <- function() geom_node_point(color="cornflowerblue", size=8)
}
else if (missing(node_color) & !missing(node_size)){
if (is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color="cornflowerblue")
}else{
point <- function() geom_node_point(aes(size=!!node_s), color="cornflowerblue")
}
else if (!missing(node_color) & missing(node_size)){
if (is.character(substitute(node_color))){
point <- function() geom_node_point(color=node_color, size=8)
}else{
point <- function() geom_node_point(aes(color=!!node_c), size=8)
}
else if (is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color=node_color)}
else if (is.character(substitute(node_color)) & !is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(size=!!node_s), color=node_color)}
else if (!is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(color=!!node_c), size=node_size)
}
else{
point <- function() geom_node_point(aes(color=!!node_c, size=!!node_s))
}
##Edge Customization
edge_c<-enquo(edge_color)
edge_s<-enquo(edge_size)
if (directed==T){
edge_arrow=arrow(angle = 15, type="closed", length = unit(0.4, "cm"))
}else{
edge_arrow=NULL
}
if (missing(edge_color) & missing(edge_size)){
link <- function() geom_edge_link(edge_color="slategrey", edge_width=0.6, arrow=edge_arrow)
}
else if (missing(edge_color) & !missing(edge_size)){
if (is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color="slategrey", arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color="slategrey", arrow=edge_arrow)
}
else if (!missing(edge_color) & missing(edge_size)){
if (is.character(substitute(edge_color))){
link <- function() geom_edge_link(edge_color=edge_color, edge_width=0.6, arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=0.6, arrow=edge_arrow)
}
else if (is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color=edge_color, arrow=edge_arrow)}
else if (is.character(substitute(edge_color)) & !is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color=edge_color, arrow=edge_arrow)}
else if (!is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=edge_size, arrow=edge_arrow)
}
else{
edge_s_test<-deparse(substitute(edge_size))
edge_c_test<-deparse(substitute(edge_color))
if (is.null(test_df[[edge_s_test]])){
stop("Edge size error: your node size must be an integer or the name of a variable in the edges table")
}
if (is.null(test_df[[edge_c_test]])){
stop("Edge color error: your node size must be a character vector or the name of a variable in the edges table")
}
link <- function() geom_edge_link(aes(edge_color=!!edge_c, edge_width=!!edge_s), arrow=edge_arrow)
}
##label
if (missing(label)){
print(vertex_attr_names(data)[1])
text <- function() geom_node_text(aes(label=get(vertex_attr_names(data)[1])),
colour = 'navy', vjust = 0.4)
}
else{
label=enquo(label)
text <- function() geom_node_text(aes(label=!!label),
colour = 'navy', vjust = 0.4)
}
##graph
g<-data %>%
ggraph(layout = layout)+
link() +
point() +
text()+
ggtitle(title)+
theme_graph()
all_data<-list("data"=data,"network"=g)
return(all_data)
}
imageNet(karate, edge_size =beef)
imageNet(karate, edge_color =beef)
imageNet(karate, edge_color =edge_weight)
imageNet(karate, node_color =eigen)
imageNet<-function(data, nodes=NULL, layout = "lgl", label, directed=F, node_color,
node_size, edge_color, edge_size){
title<-paste0("Network Graph of ", deparse(substitute(data)))
title<-paste0(title, " data")
if(is.data.frame(data)){
data = tbl_graph(edges=data, nodes=nodes, directed = directed)
}
if(is.igraph(data)){
data = as_tbl_graph(data, directed = directed)
}
else{
data = as_tbl_graph(data, directed = directed)
}
label_test<-deparse(substitute(label))
node_s_test<-deparse(substitute(node_size))
node_c_test<-deparse(substitute(node_color))
edge_s_test<-deparse(substitute(edge_size))
edge_c_test<-deparse(substitute(edge_color))
##Add Centrality Measures to Nodes/Edges Tables
df<-data%>%
activate(edges)
df<-as_tibble(df)%>%
group_by(from, to)%>%
summarise(edge_weight=n())%>%
ungroup()
data<-data%>%
activate(edges) %>%
left_join(df, by = c("from", "to"))
data<-data%>%
activate(nodes)%>%
mutate(betweenness = centrality_betweenness(directed=directed)) %>%
mutate(closeness = centrality_closeness())%>%
mutate(degree=centrality_degree())%>%
mutate(eigen=centrality_eigen(directed=directed))
##Check for Appropriate Edge and Node Inputs
test_df<-data%>%
activate(nodes)%>%
as_tibble()
if (!missing(label)){
if (!is.character(substitute(label))){
if (is.null(test_df[[label_test]])){
stop("Label error: your label must be a character vector or the name of a variable in the nodes table")
}
if(!missing(node_color)){
if (!is.character(substitute(node_color))){
if (is.null(test_df[[node_c_test]])){
stop("Node color error: your input for node color must be a character vector or the name of a variable in the nodes table")
}
if(!missing(node_size)){
if (!is.numeric(substitute(node_size))){
if (is.null(test_df[[node_s_test]])){
stop("Node size error: your input for node size must be an integer or the name of a variable in the nodes table")
}
if(!missing(edge_color)){
if (!is.character(substitute(edge_color))){
if (is.null(df[[edge_c_test]])){
stop("Edge color error: your input for node color must be a character vector or the name of a variable in the edges table")
}
if(!missing(edge_size)){
if (!is.numeric(substitute(edge_size))){
if (is.null(df[[edge_s_test]])){
stop("Edge size error: your input for node size must be an integer or the name of a variable in the edges table")
}
##Node Customization
node_c<-enquo(node_color)
node_s<-enquo(node_size)
if (missing(node_color) & missing(node_size)){
point <- function() geom_node_point(color="cornflowerblue", size=8)
}
else if (missing(node_color) & !missing(node_size)){
if (is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color="cornflowerblue")
}else{
point <- function() geom_node_point(aes(size=!!node_s), color="cornflowerblue")
}
else if (!missing(node_color) & missing(node_size)){
if (is.character(substitute(node_color))){
point <- function() geom_node_point(color=node_color, size=8)
}else{
point <- function() geom_node_point(aes(color=!!node_c), size=8)
}
else if (is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color=node_color)}
else if (is.character(substitute(node_color)) & !is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(size=!!node_s), color=node_color)}
else if (!is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(color=!!node_c), size=node_size)
}
else{
point <- function() geom_node_point(aes(color=!!node_c, size=!!node_s))
}
##Edge Customization
edge_c<-enquo(edge_color)
edge_s<-enquo(edge_size)
if (directed==T){
edge_arrow=arrow(angle = 15, type="closed", length = unit(0.4, "cm"))
}else{
edge_arrow=NULL
}
if (missing(edge_color) & missing(edge_size)){
link <- function() geom_edge_link(edge_color="slategrey", edge_width=0.6, arrow=edge_arrow)
}
else if (missing(edge_color) & !missing(edge_size)){
if (is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color="slategrey", arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color="slategrey", arrow=edge_arrow)
}
else if (!missing(edge_color) & missing(edge_size)){
if (is.character(substitute(edge_color))){
link <- function() geom_edge_link(edge_color=edge_color, edge_width=0.6, arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=0.6, arrow=edge_arrow)
}
else if (is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color=edge_color, arrow=edge_arrow)}
else if (is.character(substitute(edge_color)) & !is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color=edge_color, arrow=edge_arrow)}
else if (!is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=edge_size, arrow=edge_arrow)
}
else{
link <- function() geom_edge_link(aes(edge_color=!!edge_c, edge_width=!!edge_s), arrow=edge_arrow)
}
##label
if (missing(label)){
print(vertex_attr_names(data)[1])
text <- function() geom_node_text(aes(label=get(vertex_attr_names(data)[1])),
colour = 'navy', vjust = 0.4)
}
else{
label=enquo(label)
text <- function() geom_node_text(aes(label=!!label),
colour = 'navy', vjust = 0.4)
}
##graph
g<-data %>%
ggraph(layout = layout)+
link() +
point() +
text()+
ggtitle(title)+
theme_graph()
all_data<-list("data"=data,"network"=g)
return(all_data)
}
imageNet(karate, node_color =eigen)
imageNet(karate, node_color =hell)
imageNet(karate, node_color ="hello")
imageNet(karate, edge_color ="hello")
imageNet(karate, edge_size ="hello")
imageNet(karate, node_size ="hello")
imageNet(karate, node_size =8)
imageNet(karate, edge_size =8)
imageNet(karate, edge_size = edge_weight)
imageNet(karate, node_size = edge_weight)
test()
as_tbl_graph(karate)
g<-karate2 %>%
ggraph(layout = "lgl")+
geom_edge_link(edge_color="slategrey", edge_width=0.6) +
geom_node_point(color="cornflowerblue", size=8) +
geom_node_text(aes(label = name), colour = 'navy', vjust = 0.4)
ggtitle("Network Graph of karate data") +
theme_graph()
g<-karate2 %>%
ggraph(layout = "lgl")+
geom_edge_link(edge_color="slategrey", edge_width=0.6) +
geom_node_point(color="cornflowerblue", size=8) +
geom_node_text(aes(label = name), colour = 'navy', vjust = 0.4)+
ggtitle("Network Graph of karate data") +
theme_graph()
karate2 = as_tbl_graph(karate)
g<-karate2 %>%
ggraph(layout = "lgl")+
geom_edge_link(edge_color="slategrey", edge_width=0.6) +
geom_node_point(color="cornflowerblue", size=8) +
geom_node_text(aes(label = name), colour = 'navy', vjust = 0.4)+
ggtitle("Network Graph of karate data") +
theme_graph()
g
imageNet(karate, layout = "lgl")
digest::digest(g)
digest::digest(imageNet(karate, label=name, layout="lgl"))
g
imageNet(karate, label=name, layout="lgl")
karate2
data = as_tbl_graph(karate)
df<-data%>%
activate(edges)
df<-as_tibble(df)%>%
group_by(from, to)%>%
summarise(edge_weight=n())%>%
ungroup()
data<-data%>%
activate(edges) %>%
left_join(df, by = c("from", "to"))
data<-data%>%
activate(nodes)%>%
mutate(betweenness = centrality_betweenness(directed=directed)) %>%
mutate(closeness = centrality_closeness())%>%
mutate(degree=centrality_degree())%>%
mutate(eigen=centrality_eigen(directed=directed))
data = as_tbl_graph(karate)
df<-data%>%
activate(edges)
df<-as_tibble(df)%>%
group_by(from, to)%>%
summarise(edge_weight=n())%>%
ungroup()
data<-data%>%
activate(edges) %>%
left_join(df, by = c("from", "to"))
data<-data%>%
activate(nodes)%>%
mutate(betweenness = centrality_betweenness(directed=F)) %>%
mutate(closeness = centrality_closeness())%>%
mutate(degree=centrality_degree())%>%
mutate(eigen=centrality_eigen(directed=F))
data
netImage(karate)
imageNet(karate)
digest::digest(data)
digest::digest(imageNet(karate)$data)
imageNet(karate)$data
digest::digest(imageNet(karate)$data)
imageNet<-function(data, nodes=NULL, layout = "lgl", label, directed=F, node_color,
node_size, edge_color, edge_size){
title<-paste0("Network Graph of ", deparse(substitute(data)))
title<-paste0(title, " data")
if(is.data.frame(data)){
data = tbl_graph(edges=data, nodes=nodes, directed = directed)
}
if(is.igraph(data)){
data = as_tbl_graph(data, directed = directed)
}
else{
data = as_tbl_graph(data, directed = directed)
}
label_test<-deparse(substitute(label))
node_s_test<-deparse(substitute(node_size))
node_c_test<-deparse(substitute(node_color))
edge_s_test<-deparse(substitute(edge_size))
edge_c_test<-deparse(substitute(edge_color))
##Add Centrality Measures to Nodes/Edges Tables
df<-data%>%
activate(edges)
df<-as_tibble(df)%>%
group_by(from, to)%>%
summarise(edge_weight=n())%>%
ungroup()
data<-data%>%
activate(edges) %>%
left_join(df, by = c("from", "to"))
data<-data%>%
activate(nodes)%>%
mutate(betweenness = centrality_betweenness(directed=directed)) %>%
mutate(closeness = centrality_closeness())%>%
mutate(degree=centrality_degree())%>%
mutate(eigen=centrality_eigen(directed=directed))
##Check for Appropriate Edge and Node Inputs
test_df<-data%>%
activate(nodes)%>%
as_tibble()
if (!missing(label)){
if (!is.character(substitute(label))){
if (is.null(test_df[[label_test]])){
stop("Label error: your label must be a character vector or the name of a variable from the nodes table")
}
if(!missing(node_color)){
if (!is.character(substitute(node_color))){
if (is.null(test_df[[node_c_test]])){
stop("Node color error: your input for node color must be a character vector or the name of a variable from the nodes table")
}
if(!missing(node_size)){
if (!is.numeric(substitute(node_size))){
if (is.null(test_df[[node_s_test]])){
stop("Node size error: your input for node size must be an integer or the name of a variable from the nodes table")
}
if(!missing(edge_color)){
if (!is.character(substitute(edge_color))){
if (is.null(df[[edge_c_test]])){
stop("Edge color error: your input for node color must be a character vector or the name of a variable from the edges table")
}
if(!missing(edge_size)){
if (!is.numeric(substitute(edge_size))){
if (is.null(df[[edge_s_test]])){
stop("Edge size error: your input for node size must be an integer or the name of a variable from the edges table")
}
##Node Customization
node_c<-enquo(node_color)
node_s<-enquo(node_size)
if (missing(node_color) & missing(node_size)){
point <- function() geom_node_point(color="cornflowerblue", size=8)
}
else if (missing(node_color) & !missing(node_size)){
if (is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color="cornflowerblue")
}else{
point <- function() geom_node_point(aes(size=!!node_s), color="cornflowerblue")
}
else if (!missing(node_color) & missing(node_size)){
if (is.character(substitute(node_color))){
point <- function() geom_node_point(color=node_color, size=8)
}else{
point <- function() geom_node_point(aes(color=!!node_c), size=8)
}
else if (is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(size=node_size, color=node_color)}
else if (is.character(substitute(node_color)) & !is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(size=!!node_s), color=node_color)}
else if (!is.character(substitute(node_color)) & is.numeric(substitute(node_size))){
point <- function() geom_node_point(aes(color=!!node_c), size=node_size)
}
else{
point <- function() geom_node_point(aes(color=!!node_c, size=!!node_s))
}
##Edge Customization
edge_c<-enquo(edge_color)
edge_s<-enquo(edge_size)
if (directed==T){
edge_arrow=arrow(angle = 15, type="closed", length = unit(0.4, "cm"))
}else{
edge_arrow=NULL
}
if (missing(edge_color) & missing(edge_size)){
link <- function() geom_edge_link(edge_color="slategrey", edge_width=0.6, arrow=edge_arrow)
}
else if (missing(edge_color) & !missing(edge_size)){
if (is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color="slategrey", arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color="slategrey", arrow=edge_arrow)
}
else if (!missing(edge_color) & missing(edge_size)){
if (is.character(substitute(edge_color))){
link <- function() geom_edge_link(edge_color=edge_color, edge_width=0.6, arrow=edge_arrow)
}else{
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=0.6, arrow=edge_arrow)
}
else if (is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(edge_width=edge_size, edge_color=edge_color, arrow=edge_arrow)}
else if (is.character(substitute(edge_color)) & !is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_width=!!edge_s), edge_color=edge_color, arrow=edge_arrow)}
else if (!is.character(substitute(edge_color)) & is.numeric(substitute(edge_size))){
link <- function() geom_edge_link(aes(edge_color=!!edge_c), edge_width=edge_size, arrow=edge_arrow)
}
else{
link <- function() geom_edge_link(aes(edge_color=!!edge_c, edge_width=!!edge_s), arrow=edge_arrow)
}
##label
if (missing(label)){
text <- function() geom_node_text(aes(label=get(vertex_attr_names(data)[1])),
colour = 'navy', vjust = 0.4)
}
else{
label=enquo(label)
text <- function() geom_node_text(aes(label=!!label),
colour = 'navy', vjust = 0.4)
}
##graph
g<-data %>%
ggraph(layout = layout)+
link() +
point() +
text()+
ggtitle(title)+
theme_graph()
all_data<-list("data"=data,"network"=g)
return(all_data)
}
digest::digest(imageNet(karate)$data)
digest::digest(datA)
digest::digest(data)
imageNet(karate)$data
data
imageNet(karate)$data==data
type(imageNet(karate)$data)
typeof(imageNet(karate)$data)
typeof(data)
all.equal(imageNet(karate)$data, data)
test()
imageNet(karate, layout = "lgl", label=name, edge_color="slategrey",
edge_size=0.6, node_color="cornflowerblue", node_size=8)$network
g
test()
imageNet(karate)
imageNet(data)
View(g)
g$labels
k<-imageNet(karate)
k$network$labels
View(g)
View(k)
g$layers
k$network$layers
class(g)
class(k$network)
test()
imageNet(karate)$network
g
test()
View(k)
View(g)
test()
imageNet(karate, label=name, layout = "kk")$network
g
test()
igraphdata::karate
library(imageNet)
test()
usethis::use_package("dplyr")
test()
library(imageNet)
usethis::use_package("igraph")
library(imageNet)
test()
is.igraph
library(igraph)
library(imageNet)
