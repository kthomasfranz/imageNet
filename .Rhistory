}
m <- addLegend(m, "bottomright", pal = pal, values = geodata$node_color,
title = node_color, opacity = 1)
}
if(!(edge_color %in% names(df)) & !(edge_size %in% names(df)))
{
for(i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = edge_color)
}
else if(!(edge_color %in% names(df)) & (edge_size %in% names(df)))
{
names(df)[names(df) == edge_size] <- "edge_size"
if(!("integer" %in% class(df$edge_size) | "numeric" %in% class(df$edge_size)))
{
stop("The edge_size argument has to be a numeric variable")
}
minrange = range(df$edge_size)[1]
maxrange = range(df$edge_size)[2]
range = maxrange - minrange
for(i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = edge_color)
}
else if((edge_color %in% names(df)) & !(edge_size %in% names(df)))
{
names(df)[names(df) == edge_color] <- "edge_color"
if("factor" %in% class(df$edge_color))
{
factpal <- colorFactor(topo.colors(length(levels(df$edge_color))), df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = factpal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = factpal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else
{
pal <- colorNumeric(palette = "Blues", domain = df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = pal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = pal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else if((edge_color %in% names(df)) & (edge_size %in% names(df)))
{
if(edge_color != edge_size)
{
names(df)[names(df) == edge_color] <- "edge_color"
names(df)[names(df) == edge_size] <- "edge_size"
}
else
{
names(df)[names(df) == edge_color] <- "edge_color"
df$edge_size <- df$edge_color
}
if(!("integer" %in% class(df$edge_size) | "numeric" %in% class(df$edge_size)))
{
stop("The edge_size argument has to be a numeric variable")
}
minrange = range(df$edge_size)[1]
maxrange = range(df$edge_size)[2]
range = maxrange - minrange
if("factor" %in% class(df$edge_color))
{
factpal <- colorFactor(topo.colors(length(levels(df$edge_color))), df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = factpal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = factpal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else
{
pal <- colorNumeric(palette = "Blues", domain = df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = pal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = pal, values = df$edge_color,
title = edge_color, opacity = 1)
}
return(m)
}
if(!(is.data.frame(df) | is.matrix(df) | is.igraph(df))){
stop("The input data has to be a data frame, a matrix, a tidygraph or an igraph")
}
if(is.data.frame(df)){
if(!(is.data.frame(geodata)))
{
stop("If the edges data is passed as a data frame, then the nodes data
along with geographical information should also be passed as a data frame")
}
m <- dfgeonetvis(df, geodata, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = name,
lat = lat, lng = lng, orig = orig, dest = dest)
}
if(is.matrix(df)){
d<-graph_from_adjacency_matrix(df)
e <- as_data_frame(d, "edges")
m <- dfgeonetvis(e, geodata, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = name,
lat = lat, lng = lng, orig = "from", dest = "to")
}
if(is.igraph(df)){
v<-as_data_frame(df, "vertices")
v$name <- row.names(v)
if(!(lat %in% names(v) & lng %in% names(v))){
stop("Longitude and latitude must be attributes of the vertices of the igraph and the corresponding attribute names must be in the arguments")
}
e <- as_data_frame(df, "edges")
m <- dfgeonetvis(df = e, geodata = v, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = "name",
lat = lat, lng = lng, orig = "from", dest = "to")
}
return(m)
}
library(imageNet)
?imageNet
library(imageNet)
?imageNet
library(imageNet)
?imageNet::airports
?imageNet::Southwest
library(pkgdown)
library(testthat)
library(devtools)
library(roxygen2)
library(sinew)
pkgdown::build_site()
library(imageNet)
pkgdown::build_site()
library(imageNet)
pkgdown::build_site()
library(imageNet)
pkgdown::build_site()
library(imageNet)
pkgdown::build_site()
pi<-function(x=3.1415){
print(x=2)
}
pi<-function(x=3.1415){
print(x=2)
}
pi<-function(x=3.1415){
return(x+2)
}
pi<-function(x=3.1415){
print(x+2)
}
data(airports)
data(Southwest)
sw_nodes = unique(c(Southwest$ORIGIN, Southwest$DEST))
k2 = airports$AIRPORT %in% sw_nodes
airports=as.data.frame(airports[k2,])
flights<-subset(Southwest, select=c(3,4,2))
airports$intvariable <- sample(9, size = nrow(airports), replace = TRUE)
airports$factorvariable <- sample(4, size = nrow(airports), replace = TRUE)
airports$factorvariable <- as.factor(airports$factorvariable)
flights$weight <- sample(7, size = nrow(flights), replace = TRUE)
m <- leaflet()
m <- addTiles(m)
name = "AIRPORT"
lat = "LATITUDE"
lng = "LONGITUDE"
orig = "ORIGIN"
dest= "DEST"
names(airports)[names(airports) == name] <- "name"
names(airports)[names(airports) == lat] <- "lat"
names(airports)[names(airports) == lng] <- "lng"
names(flights)[names(flights) == orig] <- "origin"
names(flights)[names(flights) == dest] <- "dest"
airports$name <- as.character(airports$name)
flights$origin <- as.character(flights$origin)
flights$dest <- as.character(flights$dest)
for(i in 1:length(row.names(airports)))
for(i in 1:length(row.names(airports))){
m <- addCircleMarkers(m, radius = 3, lng = airports$lng[i],
lat = airports$lat[i], popup = airports$name[i], color = "red")
}
library(leaflet)
for(i in 1:length(row.names(airports))){
m <- addCircleMarkers(m, radius = 3, lng = airports$lng[i],
lat = airports$lat[i], popup = airports$name[i], color = "red")
}
m <- leaflet()
m <- addTiles(m)
for(i in 1:length(row.names(airports))){
m <- addCircleMarkers(m, radius = 3, lng = airports$lng[i],
lat = airports$lat[i], popup = airports$name[i], color = "red")
}
for(i in 1:nrow(flights)){
originlat = airports$lat[which(airports$name == flights$origin[i])]
originlng = airports$lng[which(airports$name == flights$origin[i])]
destlat = airports$lat[which(airports$name == flights$dest[i])]
destlng = airports$lng[which(airports$name == flights$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = 4,
lng = c(originlng,destlng), color = "navy")
}
m
#reinitializing data so we can pass it to our function
data(airports)
data(Southwest)
sw_nodes = unique(c(Southwest$ORIGIN, Southwest$DEST))
k2 = airports$AIRPORT %in% sw_nodes
airports=as.data.frame(airports[k2,])
flights<-subset(Southwest, select=c(3,4,2))
airports$intvariable <- sample(9, size = nrow(airports), replace = TRUE)
airports$factorvariable <- sample(4, size = nrow(airports), replace = TRUE)
airports$factorvariable <- as.factor(airports$factorvariable)
flights$weight <- sample(7, size = nrow(flights), replace = TRUE)
geoNet(df=flights, geodata=airports, name = "AIRPORT",
lat = "LATITUDE",lng = "LONGITUDE",
orig = "ORIGIN", dest = "DEST" )
geoNet <- function(df, geodata = NULL, node_color = 'red',
node_size = 3, edge_color = 'navy', edge_size = 4, name = "name",
lat = "lat", lng = "lng", orig = "origin", dest = "destination"){
library(leaflet)
library(igraph)
dfgeonetvis <- function(df, geodata, node_color,
node_size, edge_color, edge_size, name, lat, lng, orig, dest){
names(geodata)[names(geodata) == name] <- "name"
names(geodata)[names(geodata) == lat] <- "lat"
names(geodata)[names(geodata) == lng] <- "lng"
names(df)[names(df) == orig] <- "origin"
names(df)[names(df) == dest] <- "destination"
geodata$name <- as.character(geodata$name)
df$origin <- as.character(df$origin)
df$desination <- as.character(df$destination)
m <- leaflet()
m <- addTiles(m)
if(!(node_color %in% names(geodata)) & !(node_size %in% names(geodata)))
{
for(i in 1:length(row.names(geodata)))
{
m <- addCircleMarkers(m, radius = node_size, lng = geodata$lng[i],
lat = geodata$lat[i], popup = geodata$name[i], color = node_color)
}
else if((node_color %in% names(geodata)) & !(node_size %in% names(geodata)))
{
names(geodata)[names(geodata) == node_color] <- "node_color"
if("factor" %in% class(geodata$node_color))
{
factpal <- colorFactor(topo.colors(length(levels(geodata$node_color))), geodata$node_color)
for (i in 1:nrow(geodata))
{
m<-addCircleMarkers(m, radius = node_size, lng = geodata$lng[i],
lat = geodata$lat[i], color = factpal(geodata$node_color[i]))
}
m <- addLegend(m, "bottomright", pal = factpal, values = geodata$node_color,
title = node_color, opacity = 1)
}
else
{
pal <- colorNumeric(palette = "Reds", domain = geodata$node_color)
for (i in 1:nrow(geodata))
{
m<-addCircleMarkers(m, radius = node_size, lng = geodata$lng[i],
lat = geodata$lat[i],
color = pal(geodata$node_color[i]))
}
m <- addLegend(m, "bottomright", pal = pal, values = geodata$node_color,
title = node_color, opacity = 1)
}
else if(!(node_color %in% names(geodata)) & (node_size %in% names(geodata)))
{
names(geodata)[names(geodata) == node_size] <- "node_size"
if(!("integer" %in% class(geodata$node_size) | "numeric" %in% class(geodata$node_size)))
{
stop("The node_size argument has to be a numeric variable")
}
minrange = range(geodata$node_size)[1]
maxrange = range(geodata$node_size)[2]
range = maxrange - minrange
for(i in 1:length(row.names(geodata)))
{
m <- addCircleMarkers(m, radius = (geodata$node_size[i] - minrange)*(10/range) + 2 , lng = geodata$lng[i],
lat = geodata$lat[i], popup = geodata$name[i], color = node_color)
}
else if((node_color %in% names(geodata)) & (node_size %in% names(geodata)))
{
if(node_color != node_size)
{
names(geodata)[names(geodata) == node_color] <- "node_color"
names(geodata)[names(geodata) == node_size] <- "node_size"
}
else
{
names(geodata)[names(geodata) == node_color] <- "node_color"
geodata$node_size <- geodata$node_color
}
if(!("integer" %in% class(geodata$node_size) | "numeric" %in% class(geodata$node_size)))
{
stop("The node_size argument has to be a numeric variable")
}
minrange = range(geodata$node_size)[1]
maxrange = range(geodata$node_size)[2]
range = maxrange - minrange
if("factor" %in% class(geodata$node_color))
{
pal <- colorFactor(topo.colors(length(levels(geodata$node_color))), geodata$node_color)
}
else
{
pal <- colorNumeric(palette = "Reds", domain = geodata$node_color)
}
for (i in 1:nrow(geodata))
{
m<-addCircleMarkers(m, radius = (geodata$node_size[i] - minrange)*(10/range) + 2 , lng = geodata$lng[i],
lat = geodata$lat[i], color = pal(geodata$node_color[i]))
}
m <- addLegend(m, "bottomright", pal = pal, values = geodata$node_color,
title = node_color, opacity = 1)
}
if(!(edge_color %in% names(df)) & !(edge_size %in% names(df)))
{
for(i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = edge_color)
}
else if(!(edge_color %in% names(df)) & (edge_size %in% names(df)))
{
names(df)[names(df) == edge_size] <- "edge_size"
if(!("integer" %in% class(df$edge_size) | "numeric" %in% class(df$edge_size)))
{
stop("The edge_size argument has to be a numeric variable")
}
minrange = range(df$edge_size)[1]
maxrange = range(df$edge_size)[2]
range = maxrange - minrange
for(i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = edge_color)
}
else if((edge_color %in% names(df)) & !(edge_size %in% names(df)))
{
names(df)[names(df) == edge_color] <- "edge_color"
if("factor" %in% class(df$edge_color))
{
factpal <- colorFactor(topo.colors(length(levels(df$edge_color))), df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = factpal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = factpal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else
{
pal <- colorNumeric(palette = "Blues", domain = df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = edge_size,
lng = c(originlng,destlng), color = pal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = pal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else if((edge_color %in% names(df)) & (edge_size %in% names(df)))
{
if(edge_color != edge_size)
{
names(df)[names(df) == edge_color] <- "edge_color"
names(df)[names(df) == edge_size] <- "edge_size"
}
else
{
names(df)[names(df) == edge_color] <- "edge_color"
df$edge_size <- df$edge_color
}
if(!("integer" %in% class(df$edge_size) | "numeric" %in% class(df$edge_size)))
{
stop("The edge_size argument has to be a numeric variable")
}
minrange = range(df$edge_size)[1]
maxrange = range(df$edge_size)[2]
range = maxrange - minrange
if("factor" %in% class(df$edge_color))
{
factpal <- colorFactor(topo.colors(length(levels(df$edge_color))), df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = factpal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = factpal, values = df$edge_color,
title = edge_color, opacity = 1)
}
else
{
pal <- colorNumeric(palette = "Blues", domain = df$edge_color)
for (i in 1:nrow(df))
{
originlat = geodata$lat[which(geodata$name == df$origin[i])]
originlng = geodata$lng[which(geodata$name == df$origin[i])]
destlat = geodata$lat[which(geodata$name == df$dest[i])]
destlng = geodata$lng[which(geodata$name == df$dest[i])]
m <- addPolylines(m, lat = c(originlat,	destlat), weight = (df$edge_size[i] - minrange)*(12/range) + 3,
lng = c(originlng,destlng), color = pal(df$edge_color[i]))
}
m <- addLegend(m, "topright", pal = pal, values = df$edge_color,
title = edge_color, opacity = 1)
}
return(m)
}
if(!(is.data.frame(df) | is.matrix(df) | is.igraph(df))){
stop("The input data has to be a data frame, a matrix, a tidygraph or an igraph")
}
if(is.data.frame(df)){
if(!(is.data.frame(geodata)))
{
stop("If the edges data is passed as a data frame, then the nodes data
along with geographical information should also be passed as a data frame")
}
m <- dfgeonetvis(df, geodata, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = name,
lat = lat, lng = lng, orig = orig, dest = dest)
}
if(is.matrix(df)){
d<-graph_from_adjacency_matrix(df)
e <- as_data_frame(d, "edges")
m <- dfgeonetvis(e, geodata, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = name,
lat = lat, lng = lng, orig = "from", dest = "to")
}
if(is.igraph(df)){
v<-as_data_frame(df, "vertices")
v$name <- row.names(v)
if(!(lat %in% names(v) & lng %in% names(v))){
stop("Longitude and latitude must be attributes of the vertices of the igraph and the corresponding attribute names must be in the arguments")
}
e <- as_data_frame(df, "edges")
m <- dfgeonetvis(df = e, geodata = v, node_color = node_color, node_size = node_size,
edge_color = edge_color, edge_size = edge_size, name = "name",
lat = lat, lng = lng, orig = "from", dest = "to")
}
return(m)
}
geoNet(df=flights, geodata=airports, name = "AIRPORT",
lat = "LATITUDE",lng = "LONGITUDE",
orig = "ORIGIN", dest = "DEST" )
k<-geoNet(df=flights, geodata=airports, name = "AIRPORT",
lat = "LATITUDE",lng = "LONGITUDE",
orig = "ORIGIN", dest = "DEST" )
View(k)
View(m)
k
m
View(k)
m$sizingPolicy
airports <- read.csv("airports.csv")
flights <- read.csv("Southwest.csv")
library(imageNet)
pkgdown::build_site()
library(imageNet)
